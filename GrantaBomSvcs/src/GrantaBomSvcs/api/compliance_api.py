# coding: utf-8

"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401


class ComplianceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client):
        self.api_client = api_client

    def post_miservicelayer_bom_analytics_v1svc_compliance_bom1711(self, body, **kwargs):  # noqa: E501
        """Get the compliance for a BoM  # noqa: E501

        Performs compliance analysis on the provided 17/11 BoM in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForBom1711Request body: (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForBom1711Response
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.post_miservicelayer_bom_analytics_v1svc_compliance_bom1711_with_http_info(body, **kwargs)  # noqa: E501
        return data

    def post_miservicelayer_bom_analytics_v1svc_compliance_bom1711_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get the compliance for a BoM  # noqa: E501

        Performs compliance analysis on the provided 17/11 BoM in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForBom1711Request body: (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForBom1711Response
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method post_miservicelayer_bom_analytics_v1svc_compliance_bom1711".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_miservicelayer_bom_analytics_v1svc_compliance_bom1711`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/BomAnalytics/v1.svc/compliance/bom1711', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantaBomAnalyticsServicesInterfaceGetComplianceForBom1711Response',  # noqa: E501
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_miservicelayer_bom_analytics_v1svc_compliance_materials(self, body, **kwargs):  # noqa: E501
        """Get compliance for materials  # noqa: E501

        Performs compliance analysis on the provided materials in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForMaterialsRequest body: A set of materials references. The substance amounts in each material will be     compared to the legislation thresholds to determine whether the substance is below or above it. (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForMaterialsResponse
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.post_miservicelayer_bom_analytics_v1svc_compliance_materials_with_http_info(body, **kwargs)  # noqa: E501
        return data

    def post_miservicelayer_bom_analytics_v1svc_compliance_materials_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get compliance for materials  # noqa: E501

        Performs compliance analysis on the provided materials in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForMaterialsRequest body: A set of materials references. The substance amounts in each material will be     compared to the legislation thresholds to determine whether the substance is below or above it. (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForMaterialsResponse
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method post_miservicelayer_bom_analytics_v1svc_compliance_materials".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_miservicelayer_bom_analytics_v1svc_compliance_materials`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/BomAnalytics/v1.svc/compliance/materials', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantaBomAnalyticsServicesInterfaceGetComplianceForMaterialsResponse',  # noqa: E501
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_miservicelayer_bom_analytics_v1svc_compliance_parts(self, body, **kwargs):  # noqa: E501
        """Get compliance for parts  # noqa: E501

        Performs compliance analysis on the provided parts in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForPartsRequest body: A set of part references. (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForPartsResponse
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.post_miservicelayer_bom_analytics_v1svc_compliance_parts_with_http_info(body, **kwargs)  # noqa: E501
        return data

    def post_miservicelayer_bom_analytics_v1svc_compliance_parts_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get compliance for parts  # noqa: E501

        Performs compliance analysis on the provided parts in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForPartsRequest body: A set of part references. (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForPartsResponse
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method post_miservicelayer_bom_analytics_v1svc_compliance_parts".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_miservicelayer_bom_analytics_v1svc_compliance_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/BomAnalytics/v1.svc/compliance/parts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantaBomAnalyticsServicesInterfaceGetComplianceForPartsResponse',  # noqa: E501
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_miservicelayer_bom_analytics_v1svc_compliance_specifications(self, body, **kwargs):  # noqa: E501
        """Get compliance for specifications  # noqa: E501

        Performs compliance analysis on the provided specifications in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForSpecificationsRequest body: A set of specification references. (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForSpecificationsResponse
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.post_miservicelayer_bom_analytics_v1svc_compliance_specifications_with_http_info(body, **kwargs)  # noqa: E501
        return data

    def post_miservicelayer_bom_analytics_v1svc_compliance_specifications_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get compliance for specifications  # noqa: E501

        Performs compliance analysis on the provided specifications in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForSpecificationsRequest body: A set of specification references. (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForSpecificationsResponse
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method post_miservicelayer_bom_analytics_v1svc_compliance_specifications".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_miservicelayer_bom_analytics_v1svc_compliance_specifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/BomAnalytics/v1.svc/compliance/specifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantaBomAnalyticsServicesInterfaceGetComplianceForSpecificationsResponse',  # noqa: E501
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_miservicelayer_bom_analytics_v1svc_compliance_substances(self, body, **kwargs):  # noqa: E501
        """Get compliance for substances  # noqa: E501

        Performs compliance analysis on the provided substances in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForSubstancesRequest body: A set of substance references with their corresponding percentage amounts. The amounts will be     compared to the legislation thresholds to determine whether the substance is below or above it. (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForSubstancesResponse
        """
        kwargs['_return_http_data_only'] = True
        (data) = self.post_miservicelayer_bom_analytics_v1svc_compliance_substances_with_http_info(body, **kwargs)  # noqa: E501
        return data

    def post_miservicelayer_bom_analytics_v1svc_compliance_substances_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get compliance for substances  # noqa: E501

        Performs compliance analysis on the provided substances in the context of the specified indicator definitions.  # noqa: E501
        This method makes a synchronous HTTP request.

        :param GrantaBomAnalyticsServicesInterfaceGetComplianceForSubstancesRequest body: A set of substance references with their corresponding percentage amounts. The amounts will be     compared to the legislation thresholds to determine whether the substance is below or above it. (required)
        :return: GrantaBomAnalyticsServicesInterfaceGetComplianceForSubstancesResponse
        """

        all_params = ['body']  # noqa: E501
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '{}' to method post_miservicelayer_bom_analytics_v1svc_compliance_substances".format(key)
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_miservicelayer_bom_analytics_v1svc_compliance_substances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/BomAnalytics/v1.svc/compliance/substances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GrantaBomAnalyticsServicesInterfaceGetComplianceForSubstancesResponse',  # noqa: E501
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
