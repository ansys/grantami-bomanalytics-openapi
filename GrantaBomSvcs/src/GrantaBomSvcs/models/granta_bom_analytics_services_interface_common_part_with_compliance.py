# coding: utf-8

"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import Model


class GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indicators': 'list[GrantaBomAnalyticsServicesInterfaceCommonIndicatorResult]',
        'parts': 'list[GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance]',
        'specifications': 'list[GrantaBomAnalyticsServicesInterfaceCommonSpecificationWithCompliance]',
        'materials': 'list[GrantaBomAnalyticsServicesInterfaceCommonMaterialWithCompliance]',
        'substances': 'list[GrantaBomAnalyticsServicesInterfaceCommonSubstanceWithCompliance]',
        'reference_type': 'str',
        'reference_value': 'str'
    }

    attribute_map = {
        'indicators': 'Indicators',
        'parts': 'Parts',
        'specifications': 'Specifications',
        'materials': 'Materials',
        'substances': 'Substances',
        'reference_type': 'ReferenceType',
        'reference_value': 'ReferenceValue'
    }

    subtype_mapping = {
        'Indicators': 'GrantaBomAnalyticsServicesInterfaceCommonIndicatorResult',
        'Parts': 'GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance',
        'Specifications': 'GrantaBomAnalyticsServicesInterfaceCommonSpecificationWithCompliance',
        'Materials': 'GrantaBomAnalyticsServicesInterfaceCommonMaterialWithCompliance',
        'Substances': 'GrantaBomAnalyticsServicesInterfaceCommonSubstanceWithCompliance',
    }


    def __init__(self, indicators=None, parts=None, specifications=None, materials=None, substances=None, reference_type=None, reference_value=None):  # noqa: E501
        """GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance - a model defined in Swagger"""  # noqa: E501
        self._indicators = None
        self._parts = None
        self._specifications = None
        self._materials = None
        self._substances = None
        self._reference_type = None
        self._reference_value = None
        self.discriminator = None
        if indicators is not None:
            self.indicators = indicators
        if parts is not None:
            self.parts = parts
        if specifications is not None:
            self.specifications = specifications
        if materials is not None:
            self.materials = materials
        if substances is not None:
            self.substances = substances
        if reference_type is not None:
            self.reference_type = reference_type
        if reference_value is not None:
            self.reference_value = reference_value

    @property
    def indicators(self):
        """Gets the indicators of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501

        :return: The indicators of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :rtype: list[GrantaBomAnalyticsServicesInterfaceCommonIndicatorResult]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.

        :param indicators: The indicators of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :type: list[GrantaBomAnalyticsServicesInterfaceCommonIndicatorResult]
        """
        self._indicators = indicators

    @property
    def parts(self):
        """Gets the parts of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501

        :return: The parts of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :rtype: list[GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.

        :param parts: The parts of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :type: list[GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance]
        """
        self._parts = parts

    @property
    def specifications(self):
        """Gets the specifications of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501

        :return: The specifications of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :rtype: list[GrantaBomAnalyticsServicesInterfaceCommonSpecificationWithCompliance]
        """
        return self._specifications

    @specifications.setter
    def specifications(self, specifications):
        """Sets the specifications of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.

        :param specifications: The specifications of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :type: list[GrantaBomAnalyticsServicesInterfaceCommonSpecificationWithCompliance]
        """
        self._specifications = specifications

    @property
    def materials(self):
        """Gets the materials of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501

        :return: The materials of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :rtype: list[GrantaBomAnalyticsServicesInterfaceCommonMaterialWithCompliance]
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.

        :param materials: The materials of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :type: list[GrantaBomAnalyticsServicesInterfaceCommonMaterialWithCompliance]
        """
        self._materials = materials

    @property
    def substances(self):
        """Gets the substances of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501

        :return: The substances of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :rtype: list[GrantaBomAnalyticsServicesInterfaceCommonSubstanceWithCompliance]
        """
        return self._substances

    @substances.setter
    def substances(self, substances):
        """Sets the substances of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.

        :param substances: The substances of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :type: list[GrantaBomAnalyticsServicesInterfaceCommonSubstanceWithCompliance]
        """
        self._substances = substances

    @property
    def reference_type(self):
        """Gets the reference_type of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501

        :return: The reference_type of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.

        :param reference_type: The reference_type of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :type: str
        """
        self._reference_type = reference_type

    @property
    def reference_value(self):
        """Gets the reference_value of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501

        :return: The reference_value of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :rtype: str
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.

        :param reference_value: The reference_value of this GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance.  # noqa: E501
        :type: str
        """
        self._reference_value = reference_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantaBomAnalyticsServicesInterfaceCommonPartWithCompliance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
