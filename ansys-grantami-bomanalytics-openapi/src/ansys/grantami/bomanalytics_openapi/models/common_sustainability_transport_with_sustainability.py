"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class CommonSustainabilityTransportWithSustainability(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types = {
        "climate_change": "CommonValueWithUnit",
        "embodied_energy": "CommonValueWithUnit",
        "id": "str",
        "reference_type": "str",
        "reference_value": "str",
        "stage_name": "str",
    }

    attribute_map = {
        "climate_change": "ClimateChange",
        "embodied_energy": "EmbodiedEnergy",
        "id": "Id",
        "reference_type": "ReferenceType",
        "reference_value": "ReferenceValue",
        "stage_name": "StageName",
    }

    subtype_mapping = {
        "EmbodiedEnergy": "CommonValueWithUnit",
        "ClimateChange": "CommonValueWithUnit",
    }

    discriminator = None

    def __init__(
        self,
        *,
        climate_change: "Optional[CommonValueWithUnit]" = None,
        embodied_energy: "Optional[CommonValueWithUnit]" = None,
        id: "Optional[str]" = None,
        reference_type: "Optional[str]" = None,
        reference_value: "Optional[str]" = None,
        stage_name: "Optional[str]" = None,
    ) -> None:
        """CommonSustainabilityTransportWithSustainability - a model defined in Swagger

        Parameters
        ----------
            climate_change: CommonValueWithUnit, optional
            embodied_energy: CommonValueWithUnit, optional
            id: str, optional
            reference_type: str, optional
            reference_value: str, optional
            stage_name: str, optional
        """
        self._stage_name = None
        self._embodied_energy = None
        self._climate_change = None
        self._reference_type = None
        self._reference_value = None
        self._id = None

        if stage_name is not None:
            self.stage_name = stage_name
        if embodied_energy is not None:
            self.embodied_energy = embodied_energy
        if climate_change is not None:
            self.climate_change = climate_change
        if reference_type is not None:
            self.reference_type = reference_type
        if reference_value is not None:
            self.reference_value = reference_value
        if id is not None:
            self.id = id

    @property
    def stage_name(self) -> "str":
        """Gets the stage_name of this CommonSustainabilityTransportWithSustainability.

        Returns
        -------
        str
            The stage_name of this CommonSustainabilityTransportWithSustainability.
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name: "str") -> None:
        """Sets the stage_name of this CommonSustainabilityTransportWithSustainability.

        Parameters
        ----------
        stage_name: str
            The stage_name of this CommonSustainabilityTransportWithSustainability.
        """
        self._stage_name = stage_name

    @property
    def embodied_energy(self) -> "CommonValueWithUnit":
        """Gets the embodied_energy of this CommonSustainabilityTransportWithSustainability.

        Returns
        -------
        CommonValueWithUnit
            The embodied_energy of this CommonSustainabilityTransportWithSustainability.
        """
        return self._embodied_energy

    @embodied_energy.setter
    def embodied_energy(self, embodied_energy: "CommonValueWithUnit") -> None:
        """Sets the embodied_energy of this CommonSustainabilityTransportWithSustainability.

        Parameters
        ----------
        embodied_energy: CommonValueWithUnit
            The embodied_energy of this CommonSustainabilityTransportWithSustainability.
        """
        self._embodied_energy = embodied_energy

    @property
    def climate_change(self) -> "CommonValueWithUnit":
        """Gets the climate_change of this CommonSustainabilityTransportWithSustainability.

        Returns
        -------
        CommonValueWithUnit
            The climate_change of this CommonSustainabilityTransportWithSustainability.
        """
        return self._climate_change

    @climate_change.setter
    def climate_change(self, climate_change: "CommonValueWithUnit") -> None:
        """Sets the climate_change of this CommonSustainabilityTransportWithSustainability.

        Parameters
        ----------
        climate_change: CommonValueWithUnit
            The climate_change of this CommonSustainabilityTransportWithSustainability.
        """
        self._climate_change = climate_change

    @property
    def reference_type(self) -> "str":
        """Gets the reference_type of this CommonSustainabilityTransportWithSustainability.

        Returns
        -------
        str
            The reference_type of this CommonSustainabilityTransportWithSustainability.
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type: "str") -> None:
        """Sets the reference_type of this CommonSustainabilityTransportWithSustainability.

        Parameters
        ----------
        reference_type: str
            The reference_type of this CommonSustainabilityTransportWithSustainability.
        """
        self._reference_type = reference_type

    @property
    def reference_value(self) -> "str":
        """Gets the reference_value of this CommonSustainabilityTransportWithSustainability.

        Returns
        -------
        str
            The reference_value of this CommonSustainabilityTransportWithSustainability.
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value: "str") -> None:
        """Sets the reference_value of this CommonSustainabilityTransportWithSustainability.

        Parameters
        ----------
        reference_value: str
            The reference_value of this CommonSustainabilityTransportWithSustainability.
        """
        self._reference_value = reference_value

    @property
    def id(self) -> "str":
        """Gets the id of this CommonSustainabilityTransportWithSustainability.
        Many elements in the input BoM schema allow for an XML ID attribute (called 'id') to be set. If this was set in the input BoM, its value is returned in this property. If no value was set in the input BoM an arbitrary, a unique value will be assigned.

        Returns
        -------
        str
            The id of this CommonSustainabilityTransportWithSustainability.
        """
        return self._id

    @id.setter
    def id(self, id: "str") -> None:
        """Sets the id of this CommonSustainabilityTransportWithSustainability.
        Many elements in the input BoM schema allow for an XML ID attribute (called 'id') to be set. If this was set in the input BoM, its value is returned in this property. If no value was set in the input BoM an arbitrary, a unique value will be assigned.

        Parameters
        ----------
        id: str
            The id of this CommonSustainabilityTransportWithSustainability.
        """
        self._id = id

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonSustainabilityTransportWithSustainability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
