"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class CommonSustainabilityMaterialSummary(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types = {
        "phase_summary": "CommonSustainabilityPhaseSummary",
        "summary": "list[CommonSustainabilityMaterialSummaryEntry]",
    }

    attribute_map = {
        "phase_summary": "PhaseSummary",
        "summary": "Summary",
    }

    subtype_mapping = {
        "Summary": "CommonSustainabilityMaterialSummaryEntry",
        "PhaseSummary": "CommonSustainabilityPhaseSummary",
    }

    discriminator = None

    def __init__(
        self,
        *,
        phase_summary: "Optional[CommonSustainabilityPhaseSummary]" = None,
        summary: "Optional[List[CommonSustainabilityMaterialSummaryEntry]]" = None,
    ) -> None:
        """CommonSustainabilityMaterialSummary - a model defined in Swagger

        Parameters
        ----------
            phase_summary: CommonSustainabilityPhaseSummary, optional
            summary: List[CommonSustainabilityMaterialSummaryEntry], optional
        """
        self._summary = None
        self._phase_summary = None

        if summary is not None:
            self.summary = summary
        if phase_summary is not None:
            self.phase_summary = phase_summary

    @property
    def summary(self) -> "list[CommonSustainabilityMaterialSummaryEntry]":
        """Gets the summary of this CommonSustainabilityMaterialSummary.

        Returns
        -------
        list[CommonSustainabilityMaterialSummaryEntry]
            The summary of this CommonSustainabilityMaterialSummary.
        """
        return self._summary

    @summary.setter
    def summary(
        self, summary: "list[CommonSustainabilityMaterialSummaryEntry]"
    ) -> None:
        """Sets the summary of this CommonSustainabilityMaterialSummary.

        Parameters
        ----------
        summary: list[CommonSustainabilityMaterialSummaryEntry]
            The summary of this CommonSustainabilityMaterialSummary.
        """
        self._summary = summary

    @property
    def phase_summary(self) -> "CommonSustainabilityPhaseSummary":
        """Gets the phase_summary of this CommonSustainabilityMaterialSummary.

        Returns
        -------
        CommonSustainabilityPhaseSummary
            The phase_summary of this CommonSustainabilityMaterialSummary.
        """
        return self._phase_summary

    @phase_summary.setter
    def phase_summary(self, phase_summary: "CommonSustainabilityPhaseSummary") -> None:
        """Sets the phase_summary of this CommonSustainabilityMaterialSummary.

        Parameters
        ----------
        phase_summary: CommonSustainabilityPhaseSummary
            The phase_summary of this CommonSustainabilityMaterialSummary.
        """
        self._phase_summary = phase_summary

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonSustainabilityMaterialSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
