"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class GetAvailableLicensesResponse(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types = {
        "log_messages": "list[CommonLogEntry]",
        "restricted_substances": "bool",
        "sustainability": "bool",
    }

    attribute_map = {
        "log_messages": "LogMessages",
        "restricted_substances": "RestrictedSubstances",
        "sustainability": "Sustainability",
    }

    subtype_mapping = {
        "LogMessages": "CommonLogEntry",
    }

    discriminator = None

    def __init__(
        self,
        *,
        log_messages: "Optional[List[CommonLogEntry]]" = None,
        restricted_substances: "Optional[bool]" = None,
        sustainability: "Optional[bool]" = None,
    ) -> None:
        """GetAvailableLicensesResponse - a model defined in Swagger

        Parameters
        ----------
            log_messages: List[CommonLogEntry], optional
            restricted_substances: bool, optional
            sustainability: bool, optional
        """
        self._restricted_substances = None
        self._sustainability = None
        self._log_messages = None

        if restricted_substances is not None:
            self.restricted_substances = restricted_substances
        if sustainability is not None:
            self.sustainability = sustainability
        if log_messages is not None:
            self.log_messages = log_messages

    @property
    def restricted_substances(self) -> "bool":
        """Gets the restricted_substances of this GetAvailableLicensesResponse.

        Returns
        -------
        bool
            The restricted_substances of this GetAvailableLicensesResponse.
        """
        return self._restricted_substances

    @restricted_substances.setter
    def restricted_substances(self, restricted_substances: "bool") -> None:
        """Sets the restricted_substances of this GetAvailableLicensesResponse.

        Parameters
        ----------
        restricted_substances: bool
            The restricted_substances of this GetAvailableLicensesResponse.
        """
        self._restricted_substances = restricted_substances

    @property
    def sustainability(self) -> "bool":
        """Gets the sustainability of this GetAvailableLicensesResponse.

        Returns
        -------
        bool
            The sustainability of this GetAvailableLicensesResponse.
        """
        return self._sustainability

    @sustainability.setter
    def sustainability(self, sustainability: "bool") -> None:
        """Sets the sustainability of this GetAvailableLicensesResponse.

        Parameters
        ----------
        sustainability: bool
            The sustainability of this GetAvailableLicensesResponse.
        """
        self._sustainability = sustainability

    @property
    def log_messages(self) -> "list[CommonLogEntry]":
        """Gets the log_messages of this GetAvailableLicensesResponse.

        Returns
        -------
        list[CommonLogEntry]
            The log_messages of this GetAvailableLicensesResponse.
        """
        return self._log_messages

    @log_messages.setter
    def log_messages(self, log_messages: "list[CommonLogEntry]") -> None:
        """Sets the log_messages of this GetAvailableLicensesResponse.

        Parameters
        ----------
        log_messages: list[CommonLogEntry]
            The log_messages of this GetAvailableLicensesResponse.
        """
        self._log_messages = log_messages

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAvailableLicensesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
