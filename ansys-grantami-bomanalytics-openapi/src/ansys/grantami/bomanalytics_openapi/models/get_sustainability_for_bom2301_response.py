"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class GetSustainabilityForBom2301Response(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types = {
        "log_messages": "list[CommonLogEntry]",
        "parts": "list[CommonSustainabilityPartWithSustainability]",
        "transport_stages": "list[CommonSustainabilityTransportWithSustainability]",
    }

    attribute_map = {
        "log_messages": "LogMessages",
        "parts": "Parts",
        "transport_stages": "TransportStages",
    }

    subtype_mapping = {
        "Parts": "CommonSustainabilityPartWithSustainability",
        "TransportStages": "CommonSustainabilityTransportWithSustainability",
        "LogMessages": "CommonLogEntry",
    }

    discriminator = None

    def __init__(
        self,
        *,
        log_messages: "Optional[List[CommonLogEntry]]" = None,
        parts: "Optional[List[CommonSustainabilityPartWithSustainability]]" = None,
        transport_stages: "Optional[List[CommonSustainabilityTransportWithSustainability]]" = None,
    ) -> None:
        """GetSustainabilityForBom2301Response - a model defined in Swagger

        Parameters
        ----------
            log_messages: List[CommonLogEntry], optional
            parts: List[CommonSustainabilityPartWithSustainability], optional
            transport_stages: List[CommonSustainabilityTransportWithSustainability], optional
        """
        self._parts = None
        self._transport_stages = None
        self._log_messages = None

        if parts is not None:
            self.parts = parts
        if transport_stages is not None:
            self.transport_stages = transport_stages
        if log_messages is not None:
            self.log_messages = log_messages

    @property
    def parts(self) -> "list[CommonSustainabilityPartWithSustainability]":
        """Gets the parts of this GetSustainabilityForBom2301Response.

        Returns
        -------
        list[CommonSustainabilityPartWithSustainability]
            The parts of this GetSustainabilityForBom2301Response.
        """
        return self._parts

    @parts.setter
    def parts(self, parts: "list[CommonSustainabilityPartWithSustainability]") -> None:
        """Sets the parts of this GetSustainabilityForBom2301Response.

        Parameters
        ----------
        parts: list[CommonSustainabilityPartWithSustainability]
            The parts of this GetSustainabilityForBom2301Response.
        """
        self._parts = parts

    @property
    def transport_stages(
        self,
    ) -> "list[CommonSustainabilityTransportWithSustainability]":
        """Gets the transport_stages of this GetSustainabilityForBom2301Response.

        Returns
        -------
        list[CommonSustainabilityTransportWithSustainability]
            The transport_stages of this GetSustainabilityForBom2301Response.
        """
        return self._transport_stages

    @transport_stages.setter
    def transport_stages(
        self, transport_stages: "list[CommonSustainabilityTransportWithSustainability]"
    ) -> None:
        """Sets the transport_stages of this GetSustainabilityForBom2301Response.

        Parameters
        ----------
        transport_stages: list[CommonSustainabilityTransportWithSustainability]
            The transport_stages of this GetSustainabilityForBom2301Response.
        """
        self._transport_stages = transport_stages

    @property
    def log_messages(self) -> "list[CommonLogEntry]":
        """Gets the log_messages of this GetSustainabilityForBom2301Response.

        Returns
        -------
        list[CommonLogEntry]
            The log_messages of this GetSustainabilityForBom2301Response.
        """
        return self._log_messages

    @log_messages.setter
    def log_messages(self, log_messages: "list[CommonLogEntry]") -> None:
        """Sets the log_messages of this GetSustainabilityForBom2301Response.

        Parameters
        ----------
        log_messages: list[CommonLogEntry]
            The log_messages of this GetSustainabilityForBom2301Response.
        """
        self._log_messages = log_messages

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSustainabilityForBom2301Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
