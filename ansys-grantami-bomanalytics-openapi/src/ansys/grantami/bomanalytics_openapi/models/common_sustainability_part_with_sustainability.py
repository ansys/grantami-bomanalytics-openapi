"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class CommonSustainabilityPartWithSustainability(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "parts": "list[CommonSustainabilityPartWithSustainability]",
        "materials": "list[CommonSustainabilityMaterialWithSustainability]",
        "processes": "list[CommonSustainabilityProcessWithSustainability]",
        "substances": "list[CommonSubstanceReference]",
        "specifications": "list[CommonSustainabilitySpecificationWithSustainability]",
        "embodied_energy": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
        "climate_change": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
        "reported_mass": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
        "reference_type": "str",
        "reference_value": "str",
    }

    attribute_map = {
        "parts": "Parts",
        "materials": "Materials",
        "processes": "Processes",
        "substances": "Substances",
        "specifications": "Specifications",
        "embodied_energy": "EmbodiedEnergy",
        "climate_change": "ClimateChange",
        "reported_mass": "ReportedMass",
        "reference_type": "ReferenceType",
        "reference_value": "ReferenceValue",
    }

    subtype_mapping = {
        "Parts": "CommonSustainabilityPartWithSustainability",
        "Materials": "CommonSustainabilityMaterialWithSustainability",
        "Processes": "CommonSustainabilityProcessWithSustainability",
        "Substances": "CommonSubstanceReference",
        "Specifications": "CommonSustainabilitySpecificationWithSustainability",
        "EmbodiedEnergy": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
        "ClimateChange": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
        "ReportedMass": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
    }

    def __init__(
        self,
        *,
        climate_change: "Optional[GrantaBomAnalyticsServicesImplementationCommonValueWithUnit]" = None,
        embodied_energy: "Optional[GrantaBomAnalyticsServicesImplementationCommonValueWithUnit]" = None,
        materials: "Optional[List[CommonSustainabilityMaterialWithSustainability]]" = None,
        parts: "Optional[List[CommonSustainabilityPartWithSustainability]]" = None,
        processes: "Optional[List[CommonSustainabilityProcessWithSustainability]]" = None,
        reference_type: "Optional[str]" = None,
        reference_value: "Optional[str]" = None,
        reported_mass: "Optional[GrantaBomAnalyticsServicesImplementationCommonValueWithUnit]" = None,
        specifications: "Optional[List[CommonSustainabilitySpecificationWithSustainability]]" = None,
        substances: "Optional[List[CommonSubstanceReference]]" = None
    ) -> None:
        """CommonSustainabilityPartWithSustainability - a model defined in Swagger

        Parameters
        ----------
            climate_change: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit, optional
            embodied_energy: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit, optional
            materials: List[CommonSustainabilityMaterialWithSustainability], optional
            parts: List[CommonSustainabilityPartWithSustainability], optional
            processes: List[CommonSustainabilityProcessWithSustainability], optional
            reference_type: str, optional
            reference_value: str, optional
            reported_mass: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit, optional
            specifications: List[CommonSustainabilitySpecificationWithSustainability], optional
            substances: List[CommonSubstanceReference], optional
        """
        self._parts = None
        self._materials = None
        self._processes = None
        self._substances = None
        self._specifications = None
        self._embodied_energy = None
        self._climate_change = None
        self._reported_mass = None
        self._reference_type = None
        self._reference_value = None
        self.discriminator = None
        if parts is not None:
            self.parts = parts
        if materials is not None:
            self.materials = materials
        if processes is not None:
            self.processes = processes
        if substances is not None:
            self.substances = substances
        if specifications is not None:
            self.specifications = specifications
        if embodied_energy is not None:
            self.embodied_energy = embodied_energy
        if climate_change is not None:
            self.climate_change = climate_change
        if reported_mass is not None:
            self.reported_mass = reported_mass
        if reference_type is not None:
            self.reference_type = reference_type
        if reference_value is not None:
            self.reference_value = reference_value

    @property
    def parts(self) -> "list[CommonSustainabilityPartWithSustainability]":
        """Gets the parts of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        list[CommonSustainabilityPartWithSustainability]
            The parts of this CommonSustainabilityPartWithSustainability.
        """
        return self._parts

    @parts.setter
    def parts(self, parts: "list[CommonSustainabilityPartWithSustainability]") -> None:
        """Sets the parts of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        parts: list[CommonSustainabilityPartWithSustainability]
            The parts of this CommonSustainabilityPartWithSustainability.
        """
        self._parts = parts

    @property
    def materials(self) -> "list[CommonSustainabilityMaterialWithSustainability]":
        """Gets the materials of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        list[CommonSustainabilityMaterialWithSustainability]
            The materials of this CommonSustainabilityPartWithSustainability.
        """
        return self._materials

    @materials.setter
    def materials(
        self, materials: "list[CommonSustainabilityMaterialWithSustainability]"
    ) -> None:
        """Sets the materials of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        materials: list[CommonSustainabilityMaterialWithSustainability]
            The materials of this CommonSustainabilityPartWithSustainability.
        """
        self._materials = materials

    @property
    def processes(self) -> "list[CommonSustainabilityProcessWithSustainability]":
        """Gets the processes of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        list[CommonSustainabilityProcessWithSustainability]
            The processes of this CommonSustainabilityPartWithSustainability.
        """
        return self._processes

    @processes.setter
    def processes(
        self, processes: "list[CommonSustainabilityProcessWithSustainability]"
    ) -> None:
        """Sets the processes of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        processes: list[CommonSustainabilityProcessWithSustainability]
            The processes of this CommonSustainabilityPartWithSustainability.
        """
        self._processes = processes

    @property
    def substances(self) -> "list[CommonSubstanceReference]":
        """Gets the substances of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        list[CommonSubstanceReference]
            The substances of this CommonSustainabilityPartWithSustainability.
        """
        return self._substances

    @substances.setter
    def substances(self, substances: "list[CommonSubstanceReference]") -> None:
        """Sets the substances of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        substances: list[CommonSubstanceReference]
            The substances of this CommonSustainabilityPartWithSustainability.
        """
        self._substances = substances

    @property
    def specifications(
        self,
    ) -> "list[CommonSustainabilitySpecificationWithSustainability]":
        """Gets the specifications of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        list[CommonSustainabilitySpecificationWithSustainability]
            The specifications of this CommonSustainabilityPartWithSustainability.
        """
        return self._specifications

    @specifications.setter
    def specifications(
        self,
        specifications: "list[CommonSustainabilitySpecificationWithSustainability]",
    ) -> None:
        """Sets the specifications of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        specifications: list[CommonSustainabilitySpecificationWithSustainability]
            The specifications of this CommonSustainabilityPartWithSustainability.
        """
        self._specifications = specifications

    @property
    def embodied_energy(
        self,
    ) -> "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit":
        """Gets the embodied_energy of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The embodied_energy of this CommonSustainabilityPartWithSustainability.
        """
        return self._embodied_energy

    @embodied_energy.setter
    def embodied_energy(
        self,
        embodied_energy: "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
    ) -> None:
        """Sets the embodied_energy of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        embodied_energy: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The embodied_energy of this CommonSustainabilityPartWithSustainability.
        """
        self._embodied_energy = embodied_energy

    @property
    def climate_change(
        self,
    ) -> "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit":
        """Gets the climate_change of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The climate_change of this CommonSustainabilityPartWithSustainability.
        """
        return self._climate_change

    @climate_change.setter
    def climate_change(
        self,
        climate_change: "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
    ) -> None:
        """Sets the climate_change of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        climate_change: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The climate_change of this CommonSustainabilityPartWithSustainability.
        """
        self._climate_change = climate_change

    @property
    def reported_mass(
        self,
    ) -> "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit":
        """Gets the reported_mass of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The reported_mass of this CommonSustainabilityPartWithSustainability.
        """
        return self._reported_mass

    @reported_mass.setter
    def reported_mass(
        self,
        reported_mass: "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
    ) -> None:
        """Sets the reported_mass of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        reported_mass: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The reported_mass of this CommonSustainabilityPartWithSustainability.
        """
        self._reported_mass = reported_mass

    @property
    def reference_type(self) -> "str":
        """Gets the reference_type of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        str
            The reference_type of this CommonSustainabilityPartWithSustainability.
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type: "str") -> None:
        """Sets the reference_type of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        reference_type: str
            The reference_type of this CommonSustainabilityPartWithSustainability.
        """
        self._reference_type = reference_type

    @property
    def reference_value(self) -> "str":
        """Gets the reference_value of this CommonSustainabilityPartWithSustainability.

        Returns
        -------
        str
            The reference_value of this CommonSustainabilityPartWithSustainability.
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value: "str") -> None:
        """Sets the reference_value of this CommonSustainabilityPartWithSustainability.

        Parameters
        ----------
        reference_value: str
            The reference_value of this CommonSustainabilityPartWithSustainability.
        """
        self._reference_value = reference_value

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonSustainabilityPartWithSustainability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonSustainabilityPartWithSustainability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
