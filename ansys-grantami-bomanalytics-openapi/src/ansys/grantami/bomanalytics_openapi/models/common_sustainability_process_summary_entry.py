"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class CommonSustainabilityProcessSummaryEntry(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "process_name": "str",
        "process_record_reference": "CommonProcessReference",
        "material_record_reference": "CommonMaterialReference",
        "material_name": "str",
        "embodied_energy": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
        "embodied_energy_percentage": "float",
        "climate_change": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
        "climate_change_percentage": "float",
    }

    attribute_map = {
        "process_name": "ProcessName",
        "process_record_reference": "ProcessRecordReference",
        "material_record_reference": "MaterialRecordReference",
        "material_name": "MaterialName",
        "embodied_energy": "EmbodiedEnergy",
        "embodied_energy_percentage": "EmbodiedEnergyPercentage",
        "climate_change": "ClimateChange",
        "climate_change_percentage": "ClimateChangePercentage",
    }

    subtype_mapping = {
        "ProcessRecordReference": "CommonProcessReference",
        "MaterialRecordReference": "CommonMaterialReference",
        "EmbodiedEnergy": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
        "ClimateChange": "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
    }

    def __init__(
        self,
        *,
        climate_change: "Optional[GrantaBomAnalyticsServicesImplementationCommonValueWithUnit]" = None,
        climate_change_percentage: "Optional[float]" = None,
        embodied_energy: "Optional[GrantaBomAnalyticsServicesImplementationCommonValueWithUnit]" = None,
        embodied_energy_percentage: "Optional[float]" = None,
        material_name: "Optional[str]" = None,
        material_record_reference: "Optional[CommonMaterialReference]" = None,
        process_name: "Optional[str]" = None,
        process_record_reference: "Optional[CommonProcessReference]" = None,
    ) -> None:
        """CommonSustainabilityProcessSummaryEntry - a model defined in Swagger

        Parameters
        ----------
            climate_change: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit, optional
            climate_change_percentage: float, optional
            embodied_energy: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit, optional
            embodied_energy_percentage: float, optional
            material_name: str, optional
            material_record_reference: CommonMaterialReference, optional
            process_name: str, optional
            process_record_reference: CommonProcessReference, optional
        """
        self._process_name = None
        self._process_record_reference = None
        self._material_record_reference = None
        self._material_name = None
        self._embodied_energy = None
        self._embodied_energy_percentage = None
        self._climate_change = None
        self._climate_change_percentage = None
        self.discriminator = None
        if process_name is not None:
            self.process_name = process_name
        if process_record_reference is not None:
            self.process_record_reference = process_record_reference
        if material_record_reference is not None:
            self.material_record_reference = material_record_reference
        if material_name is not None:
            self.material_name = material_name
        if embodied_energy is not None:
            self.embodied_energy = embodied_energy
        if embodied_energy_percentage is not None:
            self.embodied_energy_percentage = embodied_energy_percentage
        if climate_change is not None:
            self.climate_change = climate_change
        if climate_change_percentage is not None:
            self.climate_change_percentage = climate_change_percentage

    @property
    def process_name(self) -> "str":
        """Gets the process_name of this CommonSustainabilityProcessSummaryEntry.

        Returns
        -------
        str
            The process_name of this CommonSustainabilityProcessSummaryEntry.
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name: "str") -> None:
        """Sets the process_name of this CommonSustainabilityProcessSummaryEntry.

        Parameters
        ----------
        process_name: str
            The process_name of this CommonSustainabilityProcessSummaryEntry.
        """
        self._process_name = process_name

    @property
    def process_record_reference(self) -> "CommonProcessReference":
        """Gets the process_record_reference of this CommonSustainabilityProcessSummaryEntry.

        Returns
        -------
        CommonProcessReference
            The process_record_reference of this CommonSustainabilityProcessSummaryEntry.
        """
        return self._process_record_reference

    @process_record_reference.setter
    def process_record_reference(
        self, process_record_reference: "CommonProcessReference"
    ) -> None:
        """Sets the process_record_reference of this CommonSustainabilityProcessSummaryEntry.

        Parameters
        ----------
        process_record_reference: CommonProcessReference
            The process_record_reference of this CommonSustainabilityProcessSummaryEntry.
        """
        self._process_record_reference = process_record_reference

    @property
    def material_record_reference(self) -> "CommonMaterialReference":
        """Gets the material_record_reference of this CommonSustainabilityProcessSummaryEntry.

        Returns
        -------
        CommonMaterialReference
            The material_record_reference of this CommonSustainabilityProcessSummaryEntry.
        """
        return self._material_record_reference

    @material_record_reference.setter
    def material_record_reference(
        self, material_record_reference: "CommonMaterialReference"
    ) -> None:
        """Sets the material_record_reference of this CommonSustainabilityProcessSummaryEntry.

        Parameters
        ----------
        material_record_reference: CommonMaterialReference
            The material_record_reference of this CommonSustainabilityProcessSummaryEntry.
        """
        self._material_record_reference = material_record_reference

    @property
    def material_name(self) -> "str":
        """Gets the material_name of this CommonSustainabilityProcessSummaryEntry.

        Returns
        -------
        str
            The material_name of this CommonSustainabilityProcessSummaryEntry.
        """
        return self._material_name

    @material_name.setter
    def material_name(self, material_name: "str") -> None:
        """Sets the material_name of this CommonSustainabilityProcessSummaryEntry.

        Parameters
        ----------
        material_name: str
            The material_name of this CommonSustainabilityProcessSummaryEntry.
        """
        self._material_name = material_name

    @property
    def embodied_energy(
        self,
    ) -> "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit":
        """Gets the embodied_energy of this CommonSustainabilityProcessSummaryEntry.

        Returns
        -------
        GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The embodied_energy of this CommonSustainabilityProcessSummaryEntry.
        """
        return self._embodied_energy

    @embodied_energy.setter
    def embodied_energy(
        self,
        embodied_energy: "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
    ) -> None:
        """Sets the embodied_energy of this CommonSustainabilityProcessSummaryEntry.

        Parameters
        ----------
        embodied_energy: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The embodied_energy of this CommonSustainabilityProcessSummaryEntry.
        """
        self._embodied_energy = embodied_energy

    @property
    def embodied_energy_percentage(self) -> "float":
        """Gets the embodied_energy_percentage of this CommonSustainabilityProcessSummaryEntry.

        Returns
        -------
        float
            The embodied_energy_percentage of this CommonSustainabilityProcessSummaryEntry.
        """
        return self._embodied_energy_percentage

    @embodied_energy_percentage.setter
    def embodied_energy_percentage(self, embodied_energy_percentage: "float") -> None:
        """Sets the embodied_energy_percentage of this CommonSustainabilityProcessSummaryEntry.

        Parameters
        ----------
        embodied_energy_percentage: float
            The embodied_energy_percentage of this CommonSustainabilityProcessSummaryEntry.
        """
        self._embodied_energy_percentage = embodied_energy_percentage

    @property
    def climate_change(
        self,
    ) -> "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit":
        """Gets the climate_change of this CommonSustainabilityProcessSummaryEntry.

        Returns
        -------
        GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The climate_change of this CommonSustainabilityProcessSummaryEntry.
        """
        return self._climate_change

    @climate_change.setter
    def climate_change(
        self,
        climate_change: "GrantaBomAnalyticsServicesImplementationCommonValueWithUnit",
    ) -> None:
        """Sets the climate_change of this CommonSustainabilityProcessSummaryEntry.

        Parameters
        ----------
        climate_change: GrantaBomAnalyticsServicesImplementationCommonValueWithUnit
            The climate_change of this CommonSustainabilityProcessSummaryEntry.
        """
        self._climate_change = climate_change

    @property
    def climate_change_percentage(self) -> "float":
        """Gets the climate_change_percentage of this CommonSustainabilityProcessSummaryEntry.

        Returns
        -------
        float
            The climate_change_percentage of this CommonSustainabilityProcessSummaryEntry.
        """
        return self._climate_change_percentage

    @climate_change_percentage.setter
    def climate_change_percentage(self, climate_change_percentage: "float") -> None:
        """Sets the climate_change_percentage of this CommonSustainabilityProcessSummaryEntry.

        Parameters
        ----------
        climate_change_percentage: float
            The climate_change_percentage of this CommonSustainabilityProcessSummaryEntry.
        """
        self._climate_change_percentage = climate_change_percentage

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonSustainabilityProcessSummaryEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonSustainabilityProcessSummaryEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
