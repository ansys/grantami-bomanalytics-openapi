# coding: utf-8

"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class CommonRequestConfig(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'material_universe_table_name': 'str',
        'inhouse_materials_table_name': 'str',
        'specifications_table_name': 'str',
        'products_and_parts_table_name': 'str',
        'substances_table_name': 'str',
        'coatings_table_name': 'str'
    }

    attribute_map = {
        'material_universe_table_name': 'MaterialUniverseTableName',
        'inhouse_materials_table_name': 'InhouseMaterialsTableName',
        'specifications_table_name': 'SpecificationsTableName',
        'products_and_parts_table_name': 'ProductsAndPartsTableName',
        'substances_table_name': 'SubstancesTableName',
        'coatings_table_name': 'CoatingsTableName'
    }

    subtype_mapping = {
    }


    def __init__(self, material_universe_table_name=None, inhouse_materials_table_name=None, specifications_table_name=None, products_and_parts_table_name=None, substances_table_name=None, coatings_table_name=None):  # noqa: E501
        """CommonRequestConfig - a model defined in Swagger"""  # noqa: E501
        self._material_universe_table_name = None
        self._inhouse_materials_table_name = None
        self._specifications_table_name = None
        self._products_and_parts_table_name = None
        self._substances_table_name = None
        self._coatings_table_name = None
        self.discriminator = None
        if material_universe_table_name is not None:
            self.material_universe_table_name = material_universe_table_name
        if inhouse_materials_table_name is not None:
            self.inhouse_materials_table_name = inhouse_materials_table_name
        if specifications_table_name is not None:
            self.specifications_table_name = specifications_table_name
        if products_and_parts_table_name is not None:
            self.products_and_parts_table_name = products_and_parts_table_name
        if substances_table_name is not None:
            self.substances_table_name = substances_table_name
        if coatings_table_name is not None:
            self.coatings_table_name = coatings_table_name

    @property
    def material_universe_table_name(self):
        """Gets the material_universe_table_name of this CommonRequestConfig.  # noqa: E501

        :return: The material_universe_table_name of this CommonRequestConfig.  # noqa: E501
        :rtype: str
        """
        return self._material_universe_table_name

    @material_universe_table_name.setter
    def material_universe_table_name(self, material_universe_table_name):
        """Sets the material_universe_table_name of this CommonRequestConfig.

        :param material_universe_table_name: The material_universe_table_name of this CommonRequestConfig.  # noqa: E501
        :type: str
        """
        self._material_universe_table_name = material_universe_table_name

    @property
    def inhouse_materials_table_name(self):
        """Gets the inhouse_materials_table_name of this CommonRequestConfig.  # noqa: E501

        :return: The inhouse_materials_table_name of this CommonRequestConfig.  # noqa: E501
        :rtype: str
        """
        return self._inhouse_materials_table_name

    @inhouse_materials_table_name.setter
    def inhouse_materials_table_name(self, inhouse_materials_table_name):
        """Sets the inhouse_materials_table_name of this CommonRequestConfig.

        :param inhouse_materials_table_name: The inhouse_materials_table_name of this CommonRequestConfig.  # noqa: E501
        :type: str
        """
        self._inhouse_materials_table_name = inhouse_materials_table_name

    @property
    def specifications_table_name(self):
        """Gets the specifications_table_name of this CommonRequestConfig.  # noqa: E501

        :return: The specifications_table_name of this CommonRequestConfig.  # noqa: E501
        :rtype: str
        """
        return self._specifications_table_name

    @specifications_table_name.setter
    def specifications_table_name(self, specifications_table_name):
        """Sets the specifications_table_name of this CommonRequestConfig.

        :param specifications_table_name: The specifications_table_name of this CommonRequestConfig.  # noqa: E501
        :type: str
        """
        self._specifications_table_name = specifications_table_name

    @property
    def products_and_parts_table_name(self):
        """Gets the products_and_parts_table_name of this CommonRequestConfig.  # noqa: E501

        :return: The products_and_parts_table_name of this CommonRequestConfig.  # noqa: E501
        :rtype: str
        """
        return self._products_and_parts_table_name

    @products_and_parts_table_name.setter
    def products_and_parts_table_name(self, products_and_parts_table_name):
        """Sets the products_and_parts_table_name of this CommonRequestConfig.

        :param products_and_parts_table_name: The products_and_parts_table_name of this CommonRequestConfig.  # noqa: E501
        :type: str
        """
        self._products_and_parts_table_name = products_and_parts_table_name

    @property
    def substances_table_name(self):
        """Gets the substances_table_name of this CommonRequestConfig.  # noqa: E501

        :return: The substances_table_name of this CommonRequestConfig.  # noqa: E501
        :rtype: str
        """
        return self._substances_table_name

    @substances_table_name.setter
    def substances_table_name(self, substances_table_name):
        """Sets the substances_table_name of this CommonRequestConfig.

        :param substances_table_name: The substances_table_name of this CommonRequestConfig.  # noqa: E501
        :type: str
        """
        self._substances_table_name = substances_table_name

    @property
    def coatings_table_name(self):
        """Gets the coatings_table_name of this CommonRequestConfig.  # noqa: E501

        :return: The coatings_table_name of this CommonRequestConfig.  # noqa: E501
        :rtype: str
        """
        return self._coatings_table_name

    @coatings_table_name.setter
    def coatings_table_name(self, coatings_table_name):
        """Sets the coatings_table_name of this CommonRequestConfig.

        :param coatings_table_name: The coatings_table_name of this CommonRequestConfig.  # noqa: E501
        :type: str
        """
        self._coatings_table_name = coatings_table_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonRequestConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonRequestConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
