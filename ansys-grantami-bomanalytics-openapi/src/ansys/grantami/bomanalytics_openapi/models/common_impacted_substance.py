# coding: utf-8

"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from . import ModelBase


class CommonImpactedSubstance(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'substance_name': 'str',
        'cas_number': 'str',
        'ec_number': 'str',
        'max_percentage_amount_in_material': 'float',
        'legislation_threshold': 'float'
    }

    attribute_map = {
        'substance_name': 'SubstanceName',
        'cas_number': 'CasNumber',
        'ec_number': 'EcNumber',
        'max_percentage_amount_in_material': 'MaxPercentageAmountInMaterial',
        'legislation_threshold': 'LegislationThreshold'
    }

    subtype_mapping = {
    }


    def __init__(self, substance_name=None, cas_number=None, ec_number=None, max_percentage_amount_in_material=None, legislation_threshold=None):  # noqa: E501
        """CommonImpactedSubstance - a model defined in Swagger"""  # noqa: E501
        self._substance_name = None
        self._cas_number = None
        self._ec_number = None
        self._max_percentage_amount_in_material = None
        self._legislation_threshold = None
        self.discriminator = None
        if substance_name is not None:
            self.substance_name = substance_name
        if cas_number is not None:
            self.cas_number = cas_number
        if ec_number is not None:
            self.ec_number = ec_number
        if max_percentage_amount_in_material is not None:
            self.max_percentage_amount_in_material = max_percentage_amount_in_material
        if legislation_threshold is not None:
            self.legislation_threshold = legislation_threshold

    @property
    def substance_name(self):
        """Gets the substance_name of this CommonImpactedSubstance.  # noqa: E501

        :return: The substance_name of this CommonImpactedSubstance.  # noqa: E501
        :rtype: str
        """
        return self._substance_name

    @substance_name.setter
    def substance_name(self, substance_name):
        """Sets the substance_name of this CommonImpactedSubstance.

        :param substance_name: The substance_name of this CommonImpactedSubstance.  # noqa: E501
        :type: str
        """
        self._substance_name = substance_name

    @property
    def cas_number(self):
        """Gets the cas_number of this CommonImpactedSubstance.  # noqa: E501

        :return: The cas_number of this CommonImpactedSubstance.  # noqa: E501
        :rtype: str
        """
        return self._cas_number

    @cas_number.setter
    def cas_number(self, cas_number):
        """Sets the cas_number of this CommonImpactedSubstance.

        :param cas_number: The cas_number of this CommonImpactedSubstance.  # noqa: E501
        :type: str
        """
        self._cas_number = cas_number

    @property
    def ec_number(self):
        """Gets the ec_number of this CommonImpactedSubstance.  # noqa: E501

        :return: The ec_number of this CommonImpactedSubstance.  # noqa: E501
        :rtype: str
        """
        return self._ec_number

    @ec_number.setter
    def ec_number(self, ec_number):
        """Sets the ec_number of this CommonImpactedSubstance.

        :param ec_number: The ec_number of this CommonImpactedSubstance.  # noqa: E501
        :type: str
        """
        self._ec_number = ec_number

    @property
    def max_percentage_amount_in_material(self):
        """Gets the max_percentage_amount_in_material of this CommonImpactedSubstance.  # noqa: E501

        :return: The max_percentage_amount_in_material of this CommonImpactedSubstance.  # noqa: E501
        :rtype: float
        """
        return self._max_percentage_amount_in_material

    @max_percentage_amount_in_material.setter
    def max_percentage_amount_in_material(self, max_percentage_amount_in_material):
        """Sets the max_percentage_amount_in_material of this CommonImpactedSubstance.

        :param max_percentage_amount_in_material: The max_percentage_amount_in_material of this CommonImpactedSubstance.  # noqa: E501
        :type: float
        """
        self._max_percentage_amount_in_material = max_percentage_amount_in_material

    @property
    def legislation_threshold(self):
        """Gets the legislation_threshold of this CommonImpactedSubstance.  # noqa: E501

        :return: The legislation_threshold of this CommonImpactedSubstance.  # noqa: E501
        :rtype: float
        """
        return self._legislation_threshold

    @legislation_threshold.setter
    def legislation_threshold(self, legislation_threshold):
        """Sets the legislation_threshold of this CommonImpactedSubstance.

        :param legislation_threshold: The legislation_threshold of this CommonImpactedSubstance.  # noqa: E501
        :type: float
        """
        self._legislation_threshold = legislation_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonImpactedSubstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonImpactedSubstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
