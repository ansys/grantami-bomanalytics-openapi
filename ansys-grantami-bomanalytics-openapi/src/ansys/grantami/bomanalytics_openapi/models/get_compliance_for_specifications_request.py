"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class GetComplianceForSpecificationsRequest(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types = {
        "config": "CommonRequestConfig",
        "database_key": "str",
        "indicators": "list[CommonIndicatorDefinition]",
        "specifications": "list[CommonSpecificationReference]",
    }

    attribute_map = {
        "config": "Config",
        "database_key": "DatabaseKey",
        "indicators": "Indicators",
        "specifications": "Specifications",
    }

    subtype_mapping = {
        "Specifications": "CommonSpecificationReference",
        "Indicators": "CommonIndicatorDefinition",
        "Config": "CommonRequestConfig",
    }

    discriminator = None

    def __init__(
        self,
        *,
        config: "Optional[CommonRequestConfig]" = None,
        database_key: "Optional[str]" = None,
        indicators: "Optional[List[CommonIndicatorDefinition]]" = None,
        specifications: "Optional[List[CommonSpecificationReference]]" = None,
    ) -> None:
        """GetComplianceForSpecificationsRequest - a model defined in Swagger

        Parameters
        ----------
            config: CommonRequestConfig, optional
            database_key: str, optional
            indicators: List[CommonIndicatorDefinition], optional
            specifications: List[CommonSpecificationReference], optional
        """
        self._specifications = None
        self._indicators = None
        self._database_key = None
        self._config = None

        if specifications is not None:
            self.specifications = specifications
        if indicators is not None:
            self.indicators = indicators
        if database_key is not None:
            self.database_key = database_key
        if config is not None:
            self.config = config

    @property
    def specifications(self) -> "list[CommonSpecificationReference]":
        """Gets the specifications of this GetComplianceForSpecificationsRequest.

        Returns
        -------
        list[CommonSpecificationReference]
            The specifications of this GetComplianceForSpecificationsRequest.
        """
        return self._specifications

    @specifications.setter
    def specifications(
        self, specifications: "list[CommonSpecificationReference]"
    ) -> None:
        """Sets the specifications of this GetComplianceForSpecificationsRequest.

        Parameters
        ----------
        specifications: list[CommonSpecificationReference]
            The specifications of this GetComplianceForSpecificationsRequest.
        """
        self._specifications = specifications

    @property
    def indicators(self) -> "list[CommonIndicatorDefinition]":
        """Gets the indicators of this GetComplianceForSpecificationsRequest.

        Returns
        -------
        list[CommonIndicatorDefinition]
            The indicators of this GetComplianceForSpecificationsRequest.
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators: "list[CommonIndicatorDefinition]") -> None:
        """Sets the indicators of this GetComplianceForSpecificationsRequest.

        Parameters
        ----------
        indicators: list[CommonIndicatorDefinition]
            The indicators of this GetComplianceForSpecificationsRequest.
        """
        self._indicators = indicators

    @property
    def database_key(self) -> "str":
        """Gets the database_key of this GetComplianceForSpecificationsRequest.

        Returns
        -------
        str
            The database_key of this GetComplianceForSpecificationsRequest.
        """
        return self._database_key

    @database_key.setter
    def database_key(self, database_key: "str") -> None:
        """Sets the database_key of this GetComplianceForSpecificationsRequest.

        Parameters
        ----------
        database_key: str
            The database_key of this GetComplianceForSpecificationsRequest.
        """
        self._database_key = database_key

    @property
    def config(self) -> "CommonRequestConfig":
        """Gets the config of this GetComplianceForSpecificationsRequest.

        Returns
        -------
        CommonRequestConfig
            The config of this GetComplianceForSpecificationsRequest.
        """
        return self._config

    @config.setter
    def config(self, config: "CommonRequestConfig") -> None:
        """Sets the config of this GetComplianceForSpecificationsRequest.

        Parameters
        ----------
        config: CommonRequestConfig
            The config of this GetComplianceForSpecificationsRequest.
        """
        self._config = config

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GetComplianceForSpecificationsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
