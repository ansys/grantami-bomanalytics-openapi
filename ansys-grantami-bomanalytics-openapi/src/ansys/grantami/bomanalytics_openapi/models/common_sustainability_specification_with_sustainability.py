"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class CommonSustainabilitySpecificationWithSustainability(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.

    """
    swagger_types = {
        "specifications": "list[CommonSustainabilitySpecificationWithSustainability]",
        "materials": "list[CommonSustainabilityMaterialWithSustainability]",
        "substances": "list[CommonSubstanceReference]",
        "coatings": "list[CommonCoatingReference]",
        "embodied_energy": "CommonValueWithUnit",
        "climate_change": "CommonValueWithUnit",
        "reported_mass": "CommonValueWithUnit",
        "external_identity": "str",
        "name": "str",
        "reference_type": "str",
        "reference_value": "str",
        "id": "str",
    }

    attribute_map = {
        "specifications": "Specifications",
        "materials": "Materials",
        "substances": "Substances",
        "coatings": "Coatings",
        "embodied_energy": "EmbodiedEnergy",
        "climate_change": "ClimateChange",
        "reported_mass": "ReportedMass",
        "external_identity": "ExternalIdentity",
        "name": "Name",
        "reference_type": "ReferenceType",
        "reference_value": "ReferenceValue",
        "id": "Id",
    }

    subtype_mapping = {
        "Specifications": "CommonSustainabilitySpecificationWithSustainability",
        "Materials": "CommonSustainabilityMaterialWithSustainability",
        "Substances": "CommonSubstanceReference",
        "Coatings": "CommonCoatingReference",
        "EmbodiedEnergy": "CommonValueWithUnit",
        "ClimateChange": "CommonValueWithUnit",
        "ReportedMass": "CommonValueWithUnit",
    }

    def __init__(
        self,
        *,
        climate_change: "Optional[CommonValueWithUnit]" = None,
        coatings: "Optional[List[CommonCoatingReference]]" = None,
        embodied_energy: "Optional[CommonValueWithUnit]" = None,
        external_identity: "Optional[str]" = None,
        id: "Optional[str]" = None,
        materials: "Optional[List[CommonSustainabilityMaterialWithSustainability]]" = None,
        name: "Optional[str]" = None,
        reference_type: "Optional[str]" = None,
        reference_value: "Optional[str]" = None,
        reported_mass: "Optional[CommonValueWithUnit]" = None,
        specifications: "Optional[List[CommonSustainabilitySpecificationWithSustainability]]" = None,
        substances: "Optional[List[CommonSubstanceReference]]" = None,
    ) -> None:
        """CommonSustainabilitySpecificationWithSustainability - a model defined in Swagger

        Parameters
        ----------
            climate_change: CommonValueWithUnit, optional
            coatings: List[CommonCoatingReference], optional
            embodied_energy: CommonValueWithUnit, optional
            external_identity: str, optional
            id: str, optional
            materials: List[CommonSustainabilityMaterialWithSustainability], optional
            name: str, optional
            reference_type: str, optional
            reference_value: str, optional
            reported_mass: CommonValueWithUnit, optional
            specifications: List[CommonSustainabilitySpecificationWithSustainability], optional
            substances: List[CommonSubstanceReference], optional
        """
        self._specifications = None
        self._materials = None
        self._substances = None
        self._coatings = None
        self._embodied_energy = None
        self._climate_change = None
        self._reported_mass = None
        self._external_identity = None
        self._name = None
        self._reference_type = None
        self._reference_value = None
        self._id = None
        self.discriminator = None
        if specifications is not None:
            self.specifications = specifications
        if materials is not None:
            self.materials = materials
        if substances is not None:
            self.substances = substances
        if coatings is not None:
            self.coatings = coatings
        if embodied_energy is not None:
            self.embodied_energy = embodied_energy
        if climate_change is not None:
            self.climate_change = climate_change
        if reported_mass is not None:
            self.reported_mass = reported_mass
        if external_identity is not None:
            self.external_identity = external_identity
        if name is not None:
            self.name = name
        if reference_type is not None:
            self.reference_type = reference_type
        if reference_value is not None:
            self.reference_value = reference_value
        if id is not None:
            self.id = id

    @property
    def specifications(
        self,
    ) -> "list[CommonSustainabilitySpecificationWithSustainability]":
        """Gets the specifications of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        list[CommonSustainabilitySpecificationWithSustainability]
            The specifications of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._specifications

    @specifications.setter
    def specifications(
        self,
        specifications: "list[CommonSustainabilitySpecificationWithSustainability]",
    ) -> None:
        """Sets the specifications of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        specifications: list[CommonSustainabilitySpecificationWithSustainability]
            The specifications of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._specifications = specifications

    @property
    def materials(self) -> "list[CommonSustainabilityMaterialWithSustainability]":
        """Gets the materials of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        list[CommonSustainabilityMaterialWithSustainability]
            The materials of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._materials

    @materials.setter
    def materials(
        self, materials: "list[CommonSustainabilityMaterialWithSustainability]"
    ) -> None:
        """Sets the materials of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        materials: list[CommonSustainabilityMaterialWithSustainability]
            The materials of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._materials = materials

    @property
    def substances(self) -> "list[CommonSubstanceReference]":
        """Gets the substances of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        list[CommonSubstanceReference]
            The substances of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._substances

    @substances.setter
    def substances(self, substances: "list[CommonSubstanceReference]") -> None:
        """Sets the substances of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        substances: list[CommonSubstanceReference]
            The substances of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._substances = substances

    @property
    def coatings(self) -> "list[CommonCoatingReference]":
        """Gets the coatings of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        list[CommonCoatingReference]
            The coatings of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._coatings

    @coatings.setter
    def coatings(self, coatings: "list[CommonCoatingReference]") -> None:
        """Sets the coatings of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        coatings: list[CommonCoatingReference]
            The coatings of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._coatings = coatings

    @property
    def embodied_energy(self) -> "CommonValueWithUnit":
        """Gets the embodied_energy of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        CommonValueWithUnit
            The embodied_energy of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._embodied_energy

    @embodied_energy.setter
    def embodied_energy(self, embodied_energy: "CommonValueWithUnit") -> None:
        """Sets the embodied_energy of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        embodied_energy: CommonValueWithUnit
            The embodied_energy of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._embodied_energy = embodied_energy

    @property
    def climate_change(self) -> "CommonValueWithUnit":
        """Gets the climate_change of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        CommonValueWithUnit
            The climate_change of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._climate_change

    @climate_change.setter
    def climate_change(self, climate_change: "CommonValueWithUnit") -> None:
        """Sets the climate_change of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        climate_change: CommonValueWithUnit
            The climate_change of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._climate_change = climate_change

    @property
    def reported_mass(self) -> "CommonValueWithUnit":
        """Gets the reported_mass of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        CommonValueWithUnit
            The reported_mass of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._reported_mass

    @reported_mass.setter
    def reported_mass(self, reported_mass: "CommonValueWithUnit") -> None:
        """Sets the reported_mass of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        reported_mass: CommonValueWithUnit
            The reported_mass of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._reported_mass = reported_mass

    @property
    def external_identity(self) -> "str":
        """Gets the external_identity of this CommonSustainabilitySpecificationWithSustainability.
        In the input BoM, the ExternalIdentity is intended to be used as a temporary reference populated and used by             applications to refer to the item within the BoM. If a value was specified in the input BoM, it will be             returned back to the client in this property. If the ExternalIdentity was not present in the input BoM,             this property is omitted.

        Returns
        -------
        str
            The external_identity of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._external_identity

    @external_identity.setter
    def external_identity(self, external_identity: "str") -> None:
        """Sets the external_identity of this CommonSustainabilitySpecificationWithSustainability.
        In the input BoM, the ExternalIdentity is intended to be used as a temporary reference populated and used by             applications to refer to the item within the BoM. If a value was specified in the input BoM, it will be             returned back to the client in this property. If the ExternalIdentity was not present in the input BoM,             this property is omitted.

        Parameters
        ----------
        external_identity: str
            The external_identity of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._external_identity = external_identity

    @property
    def name(self) -> "str":
        """Gets the name of this CommonSustainabilitySpecificationWithSustainability.
        Many elements in the input BoM schema allow for the display name to be set in a 'Name' element.             If this was set in the input BoM, its value is returned in this property. If the Name was not present in the input BoM,             this property is omitted.

        Returns
        -------
        str
            The name of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._name

    @name.setter
    def name(self, name: "str") -> None:
        """Sets the name of this CommonSustainabilitySpecificationWithSustainability.
        Many elements in the input BoM schema allow for the display name to be set in a 'Name' element.             If this was set in the input BoM, its value is returned in this property. If the Name was not present in the input BoM,             this property is omitted.

        Parameters
        ----------
        name: str
            The name of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._name = name

    @property
    def reference_type(self) -> "str":
        """Gets the reference_type of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        str
            The reference_type of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type: "str") -> None:
        """Sets the reference_type of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        reference_type: str
            The reference_type of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._reference_type = reference_type

    @property
    def reference_value(self) -> "str":
        """Gets the reference_value of this CommonSustainabilitySpecificationWithSustainability.

        Returns
        -------
        str
            The reference_value of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value: "str") -> None:
        """Sets the reference_value of this CommonSustainabilitySpecificationWithSustainability.

        Parameters
        ----------
        reference_value: str
            The reference_value of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._reference_value = reference_value

    @property
    def id(self) -> "str":
        """Gets the id of this CommonSustainabilitySpecificationWithSustainability.
        Many elements in the input BoM schema allow for an XML ID attribute (called 'id') to be set.             If this was set in the input BoM, its value is returned in this property.             If no value was set in the input BoM an arbitrary, a unique value will be assigned.

        Returns
        -------
        str
            The id of this CommonSustainabilitySpecificationWithSustainability.
        """
        return self._id

    @id.setter
    def id(self, id: "str") -> None:
        """Sets the id of this CommonSustainabilitySpecificationWithSustainability.
        Many elements in the input BoM schema allow for an XML ID attribute (called 'id') to be set.             If this was set in the input BoM, its value is returned in this property.             If no value was set in the input BoM an arbitrary, a unique value will be assigned.

        Parameters
        ----------
        id: str
            The id of this CommonSustainabilitySpecificationWithSustainability.
        """
        self._id = id

    def get_real_child_model(self, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def to_dict(self) -> Dict:
        """Returns the model properties as a dict

        Returns
        -------
        Dict
            Dictionary indexed by property name containing all the model properties
        """
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonSustainabilitySpecificationWithSustainability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model

        Returns
        -------
        str
            String representation of the model as a dictionary
        """
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonSustainabilitySpecificationWithSustainability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
