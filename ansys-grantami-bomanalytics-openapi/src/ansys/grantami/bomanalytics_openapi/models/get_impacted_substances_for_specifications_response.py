"""
    Granta.BomAnalyticsServices

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: V1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import TYPE_CHECKING, Any, Dict, List, Optional  # noqa: F401

from . import ModelBase


if TYPE_CHECKING:
    from . import *


class GetImpactedSubstancesForSpecificationsResponse(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes
    ----------
    swagger_types: Dict[str, str]
        The key is attribute name and the value is attribute type.
    attribute_map: Dict[str, str]
        The key is attribute name and the value is json key in definition.
    subtype_mapping: Dict[str, str]
        The key is the unmangled property name and the value is the corresponding type.
    discriminator: Optional[str]
        Name of the property used as discriminator for subtypes.
    """
    swagger_types = {
        "log_messages": "list[CommonLogEntry]",
        "specifications": "list[GetImpactedSubstancesForSpecificationsSpecification]",
    }

    attribute_map = {
        "log_messages": "LogMessages",
        "specifications": "Specifications",
    }

    subtype_mapping = {
        "Specifications": "GetImpactedSubstancesForSpecificationsSpecification",
        "LogMessages": "CommonLogEntry",
    }

    discriminator = None

    def __init__(
        self,
        *,
        log_messages: "Optional[List[CommonLogEntry]]" = None,
        specifications: "Optional[List[GetImpactedSubstancesForSpecificationsSpecification]]" = None,
    ) -> None:
        """GetImpactedSubstancesForSpecificationsResponse - a model defined in Swagger

        Parameters
        ----------
            log_messages: List[CommonLogEntry], optional
            specifications: List[GetImpactedSubstancesForSpecificationsSpecification], optional
        """
        self._specifications = None
        self._log_messages = None

        if specifications is not None:
            self.specifications = specifications
        if log_messages is not None:
            self.log_messages = log_messages

    @property
    def specifications(
        self,
    ) -> "list[GetImpactedSubstancesForSpecificationsSpecification]":
        """Gets the specifications of this GetImpactedSubstancesForSpecificationsResponse.

        Returns
        -------
        list[GetImpactedSubstancesForSpecificationsSpecification]
            The specifications of this GetImpactedSubstancesForSpecificationsResponse.
        """
        return self._specifications

    @specifications.setter
    def specifications(
        self,
        specifications: "list[GetImpactedSubstancesForSpecificationsSpecification]",
    ) -> None:
        """Sets the specifications of this GetImpactedSubstancesForSpecificationsResponse.

        Parameters
        ----------
        specifications: list[GetImpactedSubstancesForSpecificationsSpecification]
            The specifications of this GetImpactedSubstancesForSpecificationsResponse.
        """
        self._specifications = specifications

    @property
    def log_messages(self) -> "list[CommonLogEntry]":
        """Gets the log_messages of this GetImpactedSubstancesForSpecificationsResponse.

        Returns
        -------
        list[CommonLogEntry]
            The log_messages of this GetImpactedSubstancesForSpecificationsResponse.
        """
        return self._log_messages

    @log_messages.setter
    def log_messages(self, log_messages: "list[CommonLogEntry]") -> None:
        """Sets the log_messages of this GetImpactedSubstancesForSpecificationsResponse.

        Parameters
        ----------
        log_messages: list[CommonLogEntry]
            The log_messages of this GetImpactedSubstancesForSpecificationsResponse.
        """
        self._log_messages = log_messages

    @classmethod
    def get_real_child_model(cls, data: ModelBase) -> str:
        """Raises a NotImplementedError for a type without a discriminator defined.

        Parameters
        ----------
        data: ModelBase
            Object representing a subclass of this class

        Raises
        ------
        NotImplementedError
            This class has no discriminator, and hence no subclasses
        """
        raise NotImplementedError()

    def __repr__(self) -> str:
        """For 'print' and 'pprint'"""
        return self.to_str()

    def __eq__(self, other: Any) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GetImpactedSubstancesForSpecificationsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: Any) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
